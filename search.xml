<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用API测试工具</title>
      <link href="/posts/eda31c22/"/>
      <url>/posts/eda31c22/</url>
      
        <content type="html"><![CDATA[<h2 id="抓包工具"><a class="markdownIt-Anchor" href="#抓包工具"></a> 抓包工具</h2><h3 id="mitmproxyanyproxy"><a class="markdownIt-Anchor" href="#mitmproxyanyproxy"></a> mitmproxy/anyproxy</h3><h3 id="burpsuitefiddlecharles"><a class="markdownIt-Anchor" href="#burpsuitefiddlecharles"></a> burpsuite/fiddle/Charles</h3><h2 id="http-client工具"><a class="markdownIt-Anchor" href="#http-client工具"></a> http client工具</h2><h3 id="requesthttpxaiohttp"><a class="markdownIt-Anchor" href="#requesthttpxaiohttp"></a> request/httpx/aiohttp</h3><h3 id="httprunner"><a class="markdownIt-Anchor" href="#httprunner"></a> httprunner</h3><h3 id="yapi"><a class="markdownIt-Anchor" href="#yapi"></a> Yapi</h3><h3 id="jmeter"><a class="markdownIt-Anchor" href="#jmeter"></a> Jmeter</h3><h3 id="apiauto"><a class="markdownIt-Anchor" href="#apiauto"></a> APIAuto</h3><p><a href="https://github.com/TommyLemon/APIAuto">https://github.com/TommyLemon/APIAuto</a></p><h3 id="hoppscotch"><a class="markdownIt-Anchor" href="#hoppscotch"></a> hoppscotch</h3><p>Open source API development ecosystem<br /><a href="https://github.com/hoppscotch/hoppscotch">https://github.com/hoppscotch/hoppscotch</a></p><h2 id="mock工具"><a class="markdownIt-Anchor" href="#mock工具"></a> Mock工具</h2><h3 id="yapi-2"><a class="markdownIt-Anchor" href="#yapi-2"></a> YApi</h3><h3 id="easymock"><a class="markdownIt-Anchor" href="#easymock"></a> EasyMock</h3><h3 id="httpretty"><a class="markdownIt-Anchor" href="#httpretty"></a> HTTPretty</h3><p><a href="https://github.com/gabrielfalcao/HTTPretty">https://github.com/gabrielfalcao/HTTPretty</a></p><h2 id="商用工具"><a class="markdownIt-Anchor" href="#商用工具"></a> 商用工具</h2><h3 id="apifox"><a class="markdownIt-Anchor" href="#apifox"></a> Apifox</h3><p>Apifox = Postman + Swagger + Mock + JMeter<br />文档：<a href="https://www.apifox.cn/help">https://www.apifox.cn/help</a></p><h3 id="metepheres"><a class="markdownIt-Anchor" href="#metepheres"></a> Metepheres</h3>]]></content>
      
      
      <categories>
          
          <category> 测试开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Solidity资料</title>
      <link href="/posts/77571803/"/>
      <url>/posts/77571803/</url>
      
        <content type="html"><![CDATA[<h2 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h2><h2 id="文字版"><a class="markdownIt-Anchor" href="#文字版"></a> 文字版</h2><h2 id="项目"><a class="markdownIt-Anchor" href="#项目"></a> 项目</h2>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity</title>
      <link href="/posts/b9a928cc/"/>
      <url>/posts/b9a928cc/</url>
      
        <content type="html"><![CDATA[<p>Solidity是一种基于以太坊区块链的智能合约编程语言，它具有类似于JavaScript和C++的语法和特性。</p><h2 id="solidity入门语法"><a class="markdownIt-Anchor" href="#solidity入门语法"></a> Solidity入门语法</h2><h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3><p>Solidity支持两种注释方式，单行注释和多行注释。单行注释使用//，多行注释使用/* */。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 这是单行注释</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">这是多行注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="变量和数据类型"><a class="markdownIt-Anchor" href="#变量和数据类型"></a> 变量和数据类型</h3><p>Solidity支持多种数据类型，包括布尔型、整型、地址、字符串和数组等。</p><ul><li>布尔型<br />布尔型表示逻辑值，只有两个可能的值，即true和false。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bool a = true;</span><br><span class="line">bool b = false;</span><br></pre></td></tr></table></figure><ul><li>整型<br />整型表示整数值，可以分为有符号整型和无符号整型。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int a = 123;  // 有符号整型</span><br><span class="line">uint b = 456;  // 无符号整型</span><br></pre></td></tr></table></figure><ul><li>地址<br />地址类型表示以太坊账户的地址，它是一个20字节的值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">address a = 0x1234567890123456789012345678901234567890;</span><br></pre></td></tr></table></figure><ul><li>字符串<br />字符串类型表示文本值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">string a = &quot;Hello World!&quot;;</span><br></pre></td></tr></table></figure><ul><li>数组<br />数组表示具有相同类型的值的有序集合。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">uint[] a = [1, 2, 3];</span><br><span class="line">string[] b = [&quot;Hello&quot;, &quot;World&quot;];</span><br></pre></td></tr></table></figure><h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3><p>Solidity中的函数可以接受参数和返回值。函数使用function关键字声明，可以指定函数的可见性和修饰符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function add(uint a, uint b) public pure returns (uint) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为add的函数，它接受两个无符号整型参数a和b，返回它们的和。public表示该函数可以被外部调用，pure表示该函数不会读取或修改合约状态。</p><h3 id="控制流"><a class="markdownIt-Anchor" href="#控制流"></a> 控制流</h3><p>Solidity支持条件语句和循环语句。</p><ul><li>条件语句<br />条件语句使用if和else关键字。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">uint a = 10;</span><br><span class="line"></span><br><span class="line">if (a &gt; 5) &#123;</span><br><span class="line">    // 如果a大于5，执行这里的代码</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 否则执行这里的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环语句<br />循环语句使用for和while关键字。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for (uint i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    // 执行10次循环</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint i = 10;</span><br><span class="line"></span><br><span class="line">while (i &gt; 0) &#123;</span><br><span class="line">    // 执行10次循环</span><br><span class="line">    i--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h3><p>结构体表示一种自定义数据类型，可以包含多个字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">struct Person &#123;</span><br><span class="line">    string name;</span><br><span class="line">    uint age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p = Person(&quot;Alice&quot;, 20);</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为Person的结构体，它包含两个字段：name和age。然后我们创建了一个名为p的Person类型的实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Example &#123;</span><br><span class="line">    struct Person &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint age;</span><br><span class="line">        bool isAdult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person public alice;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        alice.name = &quot;Alice&quot;;</span><br><span class="line">        alice.age = 30;</span><br><span class="line">        alice.isAdult = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setAge(uint age) public &#123;</span><br><span class="line">        alice.age = age;</span><br><span class="line">        if (age &gt;= 18) &#123;</span><br><span class="line">            alice.isAdult = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            alice.isAdult = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为Person的结构体，包含三个字段：name（字符串类型）、age（无符号整数类型）和isAdult（布尔类型）。合约还包含一个名为alice的公共状态变量，其类型为Person，可以用来存储一个人的姓名、年龄和成年状态。合约还定义了一个名为setAge的函数，用于设置alice的年龄，并根据年龄计算其成年状态。</p><h3 id="映射"><a class="markdownIt-Anchor" href="#映射"></a> 映射</h3><p>映射表示一种将键映射到值的数据结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mapping(address =&gt; uint) balances;</span><br><span class="line"></span><br><span class="line">balances[0x1234567890123456789012345678901234567890] = 100;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为balances的映射，它将地址映射到无符号整型。然后我们将地址0x1234567890123456789012345678901234567890的值设置为100。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Example &#123;</span><br><span class="line">    mapping(address =&gt; uint) public balances;</span><br><span class="line"></span><br><span class="line">    function deposit() public payable &#123;</span><br><span class="line">        balances[msg.sender] += msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint amount) public &#123;</span><br><span class="line">        require(balances[msg.sender] &gt;= amount, &quot;Insufficient balance&quot;);</span><br><span class="line">        payable(msg.sender).transfer(amount);</span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为balances的映射，将每个地址映射到一个无符号整数值上，表示该地址的余额。合约还定义了两个函数：</p><ul><li>deposit：允许发送以太币到合约地址，并将其存入发送方的余额中。</li><li>withdraw：允许发送方从其余额中取出指定数量的以太币。<br />在deposit和withdraw函数中，合约使用了msg.sender来引用当前交易的发送方地址，将其余额增加或减少，并使用require函数来确保余额不会变为负数。如果检查失败，函数会抛出一个错误消息，并停止执行。</li></ul><p>映射是Solidity中的一项强大功能，可用于创建各种数据结构，如哈希表、关联数组等。在实际开发中，映射通常会更加复杂，并使用更高级的技术来确保其安全性和正确性</p><h3 id="事件"><a class="markdownIt-Anchor" href="#事件"></a> 事件</h3><p>Solidity中的事件是一种机制，用于在合约执行期间将通知发送给区块链上的其他应用程序。事件通常用于跟踪合约执行的状态变化，如交易成功或失败，合约状态更改等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">event Transfer(address indexed from, address indexed to, uint value);</span><br><span class="line"></span><br><span class="line">function transfer(address to, uint value) public returns (bool) &#123;</span><br><span class="line">    emit Transfer(msg.sender, to, value);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为Transfer的事件，它包含三个参数：from、to和value。然后我们在transfer函数中调用Transfer事件，记录转账操作。</p><p>另一个简单的事件示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Example &#123;</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint amount);</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint amount) public &#123;</span><br><span class="line">        require(amount &gt; 0, &quot;Amount must be greater than zero&quot;);</span><br><span class="line">        require(msg.sender.balance &gt;= amount, &quot;Insufficient balance&quot;);</span><br><span class="line">        payable(to).transfer(amount);</span><br><span class="line">        emit Transfer(msg.sender, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为Transfer的事件，它有三个参数：from（地址类型，表示发送方地址）、to（地址类型，表示接收方地址）和amount（无符号整数类型，表示转账金额）。合约还定义了一个名为transfer的函数，用于从当前发送方地址向指定地址转移指定数量的以太币，并触发Transfer事件以通知其他应用程序。</p><p>在调用transfer函数时，合约会检查发送方余额是否足够，如果足够，则转移以太币并触发事件。其他应用程序可以监听Transfer事件，并根据其参数值更新其状态或执行其他操作。</p><p>事件是Solidity中的一项强大功能，可用于在合约执行期间与其他应用程序进行通信，如向前端Web应用程序发送通知、向后端服务器发送数据等。在实际开发中，事件通常会更加复杂，并使用更高级的技术来确保其安全性和正确性。</p><h2 id="solidity高级语法"><a class="markdownIt-Anchor" href="#solidity高级语法"></a> Solidity高级语法</h2><h2 id="模块化"><a class="markdownIt-Anchor" href="#模块化"></a> 模块化</h2><p>Solidity支持模块化，即将合约拆分为多个文件，每个文件可以包含一个或多个合约。</p><p>导入文件<br />在Solidity中，可以使用import关键字导入其他文件中定义的合约。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &quot;./MyContract.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract AnotherContract &#123;</span><br><span class="line">    MyContract c = MyContract(0x1234567890123456789012345678901234567890);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码从文件MyContract.sol中导入了名为MyContract的合约，然后我们在AnotherContract合约中创建了一个MyContract类型的实例。</p><h3 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h3><p>Solidity支持合约的继承，即一个合约可以从另一个合约继承其状态变量和函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">contract ParentContract &#123;</span><br><span class="line">    uint public a = 123;</span><br><span class="line"></span><br><span class="line">    function foo() public pure returns (uint) &#123;</span><br><span class="line">        return 456;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ChildContract is ParentContract &#123;</span><br><span class="line">    function bar() public view returns (uint) &#123;</span><br><span class="line">        return a + foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了两个合约，ParentContract和ChildContract。ChildContract继承了ParentContract的状态变量a和函数foo。</p><h3 id="抽象合约"><a class="markdownIt-Anchor" href="#抽象合约"></a> 抽象合约</h3><p>在Solidity中，抽象合约是一种不能直接实例化的合约，它只提供了一组接口（函数签名），而没有实现任何功能。抽象合约可以被认为是一个纯虚基类，只定义了一些需要被实现的方法。</p><p>抽象合约通常用于定义通用的接口，以便其他合约可以继承它并实现接口中定义的方法。这使得合约更易于模块化，并使代码更加可读和易于维护。</p><p>以下是一个简单的抽象合约示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">abstract contract PaymentGateway &#123;</span><br><span class="line">    function deposit(uint amount) public virtual;</span><br><span class="line">    function withdraw(uint amount) public virtual;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为PaymentGateway的抽象合约，它有两个函数接口：deposit和withdraw。这个合约不能被直接实例化，但可以被其他合约继承并实现这些接口。</p><p>以下是一个继承了PaymentGateway抽象合约并实现了其接口的示例合约：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Bank is PaymentGateway &#123;</span><br><span class="line">    mapping(address =&gt; uint) private balances;</span><br><span class="line"></span><br><span class="line">    function deposit(uint amount) public override &#123;</span><br><span class="line">        require(amount &gt; 0, &quot;Amount must be greater than zero&quot;);</span><br><span class="line">        balances[msg.sender] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint amount) public override &#123;</span><br><span class="line">        require(balances[msg.sender] &gt;= amount, &quot;Insufficient balance&quot;);</span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">        payable(msg.sender).transfer(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getBalance() public view returns (uint) &#123;</span><br><span class="line">        return balances[msg.sender];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为Bank的合约，它继承了PaymentGateway抽象合约，并实现了其中定义的接口。Bank合约还定义了一个名为getBalance的函数，用于返回调用方的余额。</p><p>抽象合约是Solidity中的一个重要概念，它使得代码更加模块化和可重用。在实际开发中，可以使用抽象合约来定义通用的接口，并让其他合约继承它并实现这些接口，从而大大简化代码的开发和维护。</p><h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3><p>Solidity支持接口，即仅定义函数签名而不提供实现的抽象合约。接口可以被其他合约实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">interface MyInterface &#123;</span><br><span class="line">    function foo() external returns (uint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract MyContract is MyInterface &#123;</span><br><span class="line">    function foo() public override returns (uint) &#123;</span><br><span class="line">        return 123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为MyInterface的接口，它包含一个名为foo的函数。然后我们在MyContract合约中实现了foo函数。</p><h3 id="消息"><a class="markdownIt-Anchor" href="#消息"></a> 消息</h3><p>Solidity中有一些特殊的变量，它们称为“消息变量”，包含有关当前交易的信息。</p><p>msg.sender：当前交易的发送方地址。<br />msg.value：当前交易中发送的以太币数量。<br />msg.data：当前交易中传递的数据。<br />msg.sig：当前交易中函数调用的签名。</p><h3 id="内联汇编"><a class="markdownIt-Anchor" href="#内联汇编"></a> 内联汇编</h3><p>Solidity支持内联汇编，即在Solidity代码中直接嵌入汇编代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function getGasPrice() public view returns (uint) &#123;</span><br><span class="line">    uint gasPrice;</span><br><span class="line">    assembly &#123;</span><br><span class="line">        gasPrice := tx.gasprice</span><br><span class="line">    &#125;</span><br><span class="line">    return gasPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码使用内联汇编获取当前交易的Gas价格。</p><h3 id="安全性"><a class="markdownIt-Anchor" href="#安全性"></a> 安全性</h3><p>Solidity是一门高度安全的编程语言，旨在防止智能合约中的漏洞。以下是Solidity中常用的安全性特性：</p><p>访问控制：Solidity提供了modifier关键字，用于在函数执行前检查某个条件是否满足。<br />溢出和下溢：Solidity提供了安全的数学库SafeMath，用于执行加、减、乘、除等操作时检查是否存在溢出或下溢。<br />资源管理：Solidity中的状态变量和存储变量有不同的访问权限，防止恶意合约访问和修改合约状态。<br />防重入攻击：Solidity提供了nonReentrant修饰符，用于防止合约被重复调用，从而避免恶意合约攻击。<br />示例合约<br />以下是一个简单的Solidity合约，它模拟了一个简单的银行账户系统，支持存款、取款和查询余额功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Bank &#123;</span><br><span class="line">    mapping(address =&gt; uint) balances;</span><br><span class="line"></span><br><span class="line">    event Deposit(address indexed from, uint value);</span><br><span class="line">    event Withdrawal(address indexed to, uint value);</span><br><span class="line"></span><br><span class="line">    function deposit() public payable &#123;</span><br><span class="line">        require(msg.value &gt; 0, &quot;Deposit amount must be greater than 0&quot;);</span><br><span class="line">        balances[msg.sender] += msg.value;</span><br><span class="line">        emit Deposit(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint amount) public &#123;</span><br><span class="line">        require(amount &gt; 0, &quot;Withdrawal amount must be greater than 0&quot;);</span><br><span class="line">        require(amount &lt;= balances[msg.sender], &quot;Insufficient balance&quot;);</span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">        payable(msg.sender).transfer(amount);</span><br><span class="line">        emit Withdrawal(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address account) public view returns (uint) &#123;</span><br><span class="line">        return balances[account];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为<code>Bank</code>的合约，它包含一个名为<code>balances</code>的映射，用于存储每个地址的余额。合约还定义了三个函数：</p><ul><li><code>deposit</code>：允许发送以太币到合约地址，并将其存入发送方的余额中。</li><li><code>withdraw</code>：允许发送方从其余额中取出指定数量的以太币。</li><li><code>balanceOf</code>：允许查询指定地址的余额。</li></ul><p>合约还使用了事件<code>Deposit</code>和<code>Withdrawal</code>，用于记录每个存款和取款操作的发起方和数量。</p><p>这只是一个简单的示例合约，但它涵盖了Solidity中许多基本概念和语法。在实际开发中，合约通常会更加复杂，需要更高级的语法和技术来确保其安全性和正确性。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/posts/9daba997/"/>
      <url>/posts/9daba997/</url>
      
        <content type="html"><![CDATA[<h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2>]]></content>
      
      
      <categories>
          
          <category> 测试开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门</title>
      <link href="/posts/d9ef328/"/>
      <url>/posts/d9ef328/</url>
      
        <content type="html"><![CDATA[<p>Python是一种高级、解释型的编程语言，广泛用于Web开发、数据科学、人工智能、自动化等各个领域。下面分别介绍Python的入门和高级语法。</p><h2 id="python基础语法介绍"><a class="markdownIt-Anchor" href="#python基础语法介绍"></a> Python基础语法介绍</h2><h3 id="变量和数据类型"><a class="markdownIt-Anchor" href="#变量和数据类型"></a> 变量和数据类型</h3><p>在Python中，可以使用变量来存储值，并且不需要提前声明变量类型。Python支持多种数据类型，包括整数、浮点数、布尔值、字符串、列表、元组、字典等。</p><p>以下是一些变量和数据类型的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 整数类型</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">y = -<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数类型</span></span><br><span class="line">z = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值类型</span></span><br><span class="line">a = <span class="literal">True</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串类型</span></span><br><span class="line">c = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表类型</span></span><br><span class="line">d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组类型</span></span><br><span class="line">e = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典类型</span></span><br><span class="line">f = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h3><p>Python支持多种运算符，包括算术运算符、比较运算符、逻辑运算符、位运算符等。以下是一些运算符的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 算术运算符</span></span><br><span class="line">x = <span class="number">5</span> + <span class="number">3</span></span><br><span class="line">y = <span class="number">5</span> - <span class="number">3</span></span><br><span class="line">z = <span class="number">5</span> * <span class="number">3</span></span><br><span class="line">a = <span class="number">5</span> / <span class="number">3</span></span><br><span class="line">b = <span class="number">5</span> % <span class="number">3</span></span><br><span class="line">c = <span class="number">5</span> ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算符</span></span><br><span class="line">d = <span class="number">5</span> == <span class="number">3</span></span><br><span class="line">e = <span class="number">5</span> != <span class="number">3</span></span><br><span class="line">f = <span class="number">5</span> &gt; <span class="number">3</span></span><br><span class="line">g = <span class="number">5</span> &lt; <span class="number">3</span></span><br><span class="line">h = <span class="number">5</span> &gt;= <span class="number">3</span></span><br><span class="line">i = <span class="number">5</span> &lt;= <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line">j = <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line">k = <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span></span><br><span class="line">l = <span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算符</span></span><br><span class="line">m = <span class="number">5</span> &amp; <span class="number">3</span></span><br><span class="line">n = <span class="number">5</span> | <span class="number">3</span></span><br><span class="line">o = <span class="number">5</span> ^ <span class="number">3</span></span><br><span class="line">p = ~<span class="number">5</span></span><br><span class="line">q = <span class="number">5</span> &lt;&lt; <span class="number">3</span></span><br><span class="line">r = <span class="number">5</span> &gt;&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="控制流语句"><a class="markdownIt-Anchor" href="#控制流语句"></a> 控制流语句</h3><p>Python支持多种控制流语句，包括if语句、for循环、while循环等。以下是一些控制流语句的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># if语句</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is positive&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is negative&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is zero&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环</span></span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> y:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while循环</span></span><br><span class="line">z = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> z &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    z += <span class="number">1</span></span><br><span class="line">```    </span><br><span class="line"><span class="comment">### 函数</span></span><br><span class="line">在Python中，可以使用<span class="keyword">def</span>语句定义函数。函数可以接受参数并返回值。以下是一个函数的示例：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">result = add(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出8</span></span><br></pre></td></tr></table></figure><h3 id="模块和包"><a class="markdownIt-Anchor" href="#模块和包"></a> 模块和包</h3><p>Python中的模块是一个包含Python定义和语句的文件，可以通过import语句导入。Python中的包是一个包含多个模块的目录。</p><p>以下是一个模块和包的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 模块</span></span><br><span class="line"><span class="comment"># mymodule.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模块</span></span><br><span class="line"><span class="keyword">import</span> mymodule</span><br><span class="line">mymodule.greeting(<span class="string">&quot;Alice&quot;</span>)  <span class="comment"># 输出Hello, Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包</span></span><br><span class="line"><span class="comment"># mypackage/mymodule.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用包</span></span><br><span class="line"><span class="keyword">from</span> mypackage <span class="keyword">import</span> mymodule</span><br><span class="line">result = mymodule.add(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出8</span></span><br></pre></td></tr></table></figure><h2 id="python高级语法介绍"><a class="markdownIt-Anchor" href="#python高级语法介绍"></a> Python高级语法介绍</h2><h3 id="迭代器和生成器"><a class="markdownIt-Anchor" href="#迭代器和生成器"></a> 迭代器和生成器</h3><p>Python中的迭代器是一个可以迭代访问的对象，例如列表、元组、字典等。Python中的生成器是一种更加高效的迭代器，使用yield语句生成值。</p><p>以下是一个迭代器和生成器的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 迭代器</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">my_iterator = <span class="built_in">iter</span>(my_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iterator))  <span class="comment"># 输出1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iterator))  <span class="comment"># 输出2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(my_iterator))  <span class="comment"># 输出3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_generator():</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 输出1, 2, 3</span></span><br><span class="line">```    </span><br><span class="line"><span class="comment">### 装饰器</span></span><br><span class="line">Python中的装饰器是一种用于修改函数或类的行为的语法。装饰器本质上是一个函数，可以在不修改原函数或类的情况下修改其行为。</span><br><span class="line"></span><br><span class="line">以下是一个装饰器的示例：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before the function is called.&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After the function is called.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_function()  <span class="comment"># 输出Before the function is called. Hello, World! After the function is called.</span></span><br></pre></td></tr></table></figure><h3 id="异常处理"><a class="markdownIt-Anchor" href="#异常处理"></a> 异常处理</h3><p>在Python中，可以使用try语句和except语句来处理异常。当程序出现异常时，Python会跳转到最近的except语句，并执行其中的代码。</p><p>以下是一个异常处理的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 异常处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = <span class="number">5</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error: division by zero&quot;</span>)</span><br><span class="line">```    </span><br><span class="line"><span class="comment">### 多线程和多进程</span></span><br><span class="line">在Python中，可以使用多线程和多进程来实现并发编程。多线程是指在一个程序中同时执行多个线程，多进程是指在一个程序中同时运行多个进程。</span><br><span class="line"></span><br><span class="line">以下是一个多线程和多进程的示例：</span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_numbers</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_letters</span>():</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">&quot;abcdefghij&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(letter)</span><br><span class="line"></span><br><span class="line">thread1 = threading.Thread(target=print_numbers)</span><br><span class="line">thread2 = threading.Thread(target=print_letters)</span><br><span class="line"></span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多进程</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">return</span> number ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">    results = pool.<span class="built_in">map</span>(square, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">    <span class="built_in">print</span>(results)  <span class="comment"># 输出[1, 4, 9, 16, 25]</span></span><br><span class="line">```    </span><br><span class="line"><span class="comment">### 类和面向对象编程</span></span><br><span class="line">Python是一种面向对象编程语言，支持类和对象的概念。可以使用<span class="keyword">class</span>语句来定义类，使用对象来访问类中的属性和方法。</span><br><span class="line"></span><br><span class="line">以下是一个类和面向对象编程的示例：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类和面向对象编程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, my name is &quot;</span> + self.name + <span class="string">&quot; and I am &quot;</span> + <span class="built_in">str</span>(self.age) + <span class="string">&quot; years old.&quot;</span>)</span><br><span class="line"></span><br><span class="line">person1 = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>)</span><br><span class="line">person1.greet()  <span class="comment"># 输出Hello, my name is Alice and I am 25 years old.</span></span><br></pre></td></tr></table></figure><h3 id="lambda函数"><a class="markdownIt-Anchor" href="#lambda函数"></a> Lambda函数</h3><p>Lambda函数是一种匿名函数，可以使用lambda关键字定义。Lambda函数通常用于简单的操作，例如对列表进行排序或筛选。</p><p>以下是一个Lambda函数的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Lambda函数</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">squared_numbers = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, numbers))</span><br><span class="line"><span class="built_in">print</span>(squared_numbers)  <span class="comment"># 输出[1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, numbers))</span><br><span class="line"><span class="built_in">print</span>(even_numbers)  <span class="comment"># 输出[2, 4]</span></span><br></pre></td></tr></table></figure><h3 id="生成式"><a class="markdownIt-Anchor" href="#生成式"></a> 生成式</h3><p>Python中的生成式是一种用于生成列表、集合或字典的简便语法。生成式通常比使用循环来生成相同的结果更加简洁和可读。</p><p>以下是一个生成式的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 生成式</span></span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">squared_numbers = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> numbers]</span><br><span class="line"><span class="built_in">print</span>(squared_numbers)  <span class="comment"># 输出[1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line">even_numbers = [x <span class="keyword">for</span> x <span class="keyword">in</span> numbers <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(even_numbers)  <span class="comment"># 输出[2, 4]</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>本文介绍了Python的入门和高级语法，包括基本语法、数据类型、控制流、函数、模块和包、迭代器和生成器、装饰器、异常处理、多线程和多进程、类和面向对象编程、Lambda函数以及生成式。Python是一种功能强大的编程语言，具有简单易学、可读性高等特点，在数据科学、机器学习、Web开发等</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go入门</title>
      <link href="/posts/3e80a85d/"/>
      <url>/posts/3e80a85d/</url>
      
        <content type="html"><![CDATA[<h2 id="go语言基础语法介绍"><a class="markdownIt-Anchor" href="#go语言基础语法介绍"></a> Go语言基础语法介绍</h2><h3 id="安装和环境配置"><a class="markdownIt-Anchor" href="#安装和环境配置"></a> 安装和环境配置</h3><p>首先，你需要下载并安装Go语言环境。可以从官方网站（<a href="https://golang.org/dl/%EF%BC%89%E4%B8%8A%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85%EF%BC%8C%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E5%90%8E%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E4%BD%BF%E5%85%B6%E5%8F%AF%E8%A2%AB%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BD%BF%E7%94%A8%E3%80%82">https://golang.org/dl/）上下载并安装，安装完成后设置环境变量，使其可被命令行使用。</a></p><p>Go语言的Hello World程序如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序包含了一个main函数，该函数调用了fmt包的Println函数，将&quot;Hello, World!&quot;打印到控制台。</p><h3 id="变量和类型"><a class="markdownIt-Anchor" href="#变量和类型"></a> 变量和类型</h3><p>Go语言是一种静态类型的语言，也就是说变量的类型在编译时就确定了。Go语言有多种基本数据类型，包括bool、int、float、string等，同时还有结构体和数组等复合类型。<br />变量可以使用var关键字来声明，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var i int</span><br><span class="line">i = 42</span><br></pre></td></tr></table></figure><p>可以使用:=语法来简化变量声明和赋值的过程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span></span><br></pre></td></tr></table></figure><h3 id="控制流语句"><a class="markdownIt-Anchor" href="#控制流语句"></a> 控制流语句</h3><p>Go语言的控制流语句包括if、for、switch和select等。<br />if语句的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for语句可以用来循环执行一段代码，语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> initialization; condition; post &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch语句可以根据某个表达式的值进行多个分支选择，语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> expression &#123;</span><br><span class="line"><span class="keyword">case</span> value1:</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line"><span class="keyword">case</span> value2:</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// do something else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数和方法"><a class="markdownIt-Anchor" href="#函数和方法"></a> 函数和方法</h3><p>Go语言中函数和方法是非常重要的概念。函数是一组指定输入和输出的代码，可以独立地调用。方法是与特定类型相关联的函数。<br />函数的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">(parameter1 <span class="keyword">type</span>, parameter2 <span class="keyword">type</span>)</span></span> returnType &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> someValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(receiverType)</span></span> methodName(parameter1 <span class="keyword">type</span>, parameter2 <span class="keyword">type</span>) returnType &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> someValue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组和切片"><a class="markdownIt-Anchor" href="#数组和切片"></a> 数组和切片</h3><p>Go语言中的数组是一种固定长度的数据结构，定义一个数组的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="type">int</span></span><br></pre></td></tr></table></figure><p>切片是一种动态长度的数据结构，它可以根据需要自动扩容。定义一个切片的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="type">int</span></span><br></pre></td></tr></table></figure><h3 id="结构体和指针"><a class="markdownIt-Anchor" href="#结构体和指针"></a> 结构体和指针</h3><p>Go语言中的结构体是一种自定义类型，可以包含多个字段，定义一个结构体的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>基本的结构体示例</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;name: <span class="string">&quot;Alice&quot;</span>, age: <span class="number">30</span>&#125;</span><br><span class="line">    fmt.Println(p)</span><br><span class="line">&#125;</span><br><span class="line">在上面的示例中，我们定义了一个名为Person的结构体，包含name和age两个字段。然后我们创建了一个Person类型的变量p，并为其赋值，最后打印p。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 匿名结构体示例</span><br><span class="line"><span class="string">``</span><span class="string">`go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">    p := struct &#123;</span></span><br><span class="line"><span class="string">        name string</span></span><br><span class="line"><span class="string">        age  int</span></span><br><span class="line"><span class="string">    &#125;&#123;</span></span><br><span class="line"><span class="string">        name: &quot;Alice&quot;,</span></span><br><span class="line"><span class="string">        age:  30,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    fmt.Println(p)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个匿名结构体，并为其赋值，最后打印该结构体。</p><ol start="3"><li>嵌套结构体示例</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    street  <span class="type">string</span></span><br><span class="line">    city    <span class="type">string</span></span><br><span class="line">    country <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name    <span class="type">string</span></span><br><span class="line">    age     <span class="type">int</span></span><br><span class="line">    address Address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;</span><br><span class="line">        name: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">        age:  <span class="number">30</span>,</span><br><span class="line">        address: Address&#123;</span><br><span class="line">            street:  <span class="string">&quot;Main St&quot;</span>,</span><br><span class="line">            city:    <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">            country: <span class="string">&quot;USA&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个名为Address的结构体，包含street、city和country三个字段。然后我们定义了一个名为Person的结构体，包含name、age和address三个字段，其中address字段类型为Address。然后我们创建了一个Person类型的变量p，并为其赋值，其中address字段又包含了一个Address类型的值。最后打印p。</p><ol start="4"><li>匿名字段结构体示例</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">string</span></span><br><span class="line">    <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>&#125;</span><br><span class="line">    fmt.Println(p)</span><br><span class="line">    fmt.Println(p.<span class="type">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个名为Person的结构体，包含两个匿名字段，分别为string和int类型。然后我们创建了一个Person类型的变量p，并为其赋值。我们可以通过.访问匿名字段的值，例如p.string表示访问string字段的值。最后打印p和p.string。</p><p>指针是一种特殊的变量类型，它存储了一个变量的内存地址，可以使用&amp;符号来获取一个变量的地址，使用*符号来获取指针所指向的值。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="type">int</span></span><br><span class="line">p = &amp;i</span><br><span class="line">*i = <span class="number">42</span></span><br></pre></td></tr></table></figure><h3 id="并发和并行"><a class="markdownIt-Anchor" href="#并发和并行"></a> 并发和并行</h3><p>Go语言是一种天生支持并发和并行的语言。<br />Go语言中的goroutine是一种轻量级的线程，可以在同一个进程中同时运行多个goroutine。<br />Go语言中的channel是一种可以在不同goroutine之间进行通信的机制。</p><h3 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h3><p>Go语言中的错误处理非常重要。Go语言中的函数通常会返回一个错误值，如果函数执行过程中出现了错误，就会返回一个非空的错误值。可以使用if语句来检查是否出现了错误。</p><h3 id="包和模块"><a class="markdownIt-Anchor" href="#包和模块"></a> 包和模块</h3><p>Go语言中的包是一种组织代码的机制，一个包可以包含多个文件。包可以使用import语句来导入其他包中的代码。Go语言中的模块是一种用来管理代码版本和依赖关系的机制，可以使用go mod命令来管理模块。</p><h2 id="go语言高级语法介绍"><a class="markdownIt-Anchor" href="#go语言高级语法介绍"></a> Go语言高级语法介绍</h2><h3 id="接口和多态"><a class="markdownIt-Anchor" href="#接口和多态"></a> 接口和多态</h3><p>Go语言中的接口是一种约束，可以指定一个类型需要实现哪些方法。可以使用接口来实现多态。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">Speak() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> Speak() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cat)</span></span> Speak() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Meow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">animals := []Animal&#123;Dog&#123;&#125;, Cat&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _, animal := <span class="keyword">range</span> animals &#123;</span><br><span class="line">fmt.Println(animal.Speak())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，Dog和Cat都实现了Animal接口的Speak方法，所以它们都可以存储在Animal类型的切片中。</p><h3 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h3><p>Go语言中的反射机制可以让程序在运行时动态地获取类型信息和调用方法。反射可以让程序更加灵活，但也会带来一些性能损失。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">float64</span> = <span class="number">3.14</span></span><br><span class="line">v := reflect.ValueOf(x)</span><br><span class="line">fmt.Println(<span class="string">&quot;type:&quot;</span>, v.Type())</span><br><span class="line">fmt.Println(<span class="string">&quot;value:&quot;</span>, v.Float())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，reflect.ValueOf函数可以获取变量x的反射对象，可以使用Type方法获取x的类型信息，使用Float方法获取x的值。</p><h3 id="并发编程"><a class="markdownIt-Anchor" href="#并发编程"></a> 并发编程</h3><p>Go语言的并发编程非常强大，可以使用goroutine和channel来实现。例如：</p><ol><li>goroutine示例<br />goroutine是Go语言中的轻量级线程，可以在一个程序中同时运行多个goroutine。使用goroutine可以轻松地实现并发执行的任务，而无需显式地管理线程或协程。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNumbers</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> printNumbers() <span class="comment">// 启动一个goroutine</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Main function execution&quot;</span>)</span><br><span class="line">    time.Sleep(<span class="number">6</span> * time.Second) <span class="comment">// 主函数等待6秒钟</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的示例中，printNumbers()函数被启动为一个goroutine，同时main()函数继续执行，因此可以看到输出交错进行。</p><ol start="2"><li>channel示例<br />channel是Go语言中用于goroutine之间通信的机制。channel是一个类型化的管道，可以通过它发送和接收值。channel的发送和接收操作都是阻塞的，这使得goroutine可以安全地通信。</li></ol><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">producer</span><span class="params">(c <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">        c &lt;- i <span class="comment">// 发送数据到channel</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(c) <span class="comment">// 关闭channel</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consumer</span><span class="params">(c &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> c &#123; <span class="comment">// 循环从channel中接收数据</span></span><br><span class="line">        fmt.Println(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// 创建一个channel</span></span><br><span class="line">    <span class="keyword">go</span> producer(c)      <span class="comment">// 启动一个生产者goroutine</span></span><br><span class="line">    consumer(c)         <span class="comment">// 消费者从channel中接收数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，producer()函数将1到5的整数发送到channel中，然后关闭channel。consumer()函数从channel中接收数据并将其打印出来。注意到在main()函数中没有显式地等待生产者和消费者的执行，但是由于channel是阻塞的，因此它们的执行顺序是正确的。</p><h3 id="匿名函数和闭包"><a class="markdownIt-Anchor" href="#匿名函数和闭包"></a> 匿名函数和闭包</h3><p>Go语言支持匿名函数和闭包，这使得代码更简洁、易于阅读和维护。闭包是一个函数值，它引用了函数体外部的变量。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    x := <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;x =&quot;</span>, x) <span class="comment">// 匿名函数引用外部变量 x</span></span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="defer语句"><a class="markdownIt-Anchor" href="#defer语句"></a> defer语句</h3><p>defer语句可以用于在函数返回前执行某些代码。defer语句通常用于清理资源或解锁锁定的资源。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>) <span class="comment">// 在函数返回前执行 fmt.Println(&quot;world&quot;)</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3><p>Go语言的接口使得代码更具可扩展性和可复用性。接口是一种类型，定义了一组方法，任何实现了这些方法的类型都可以作为该接口的实例。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">    Area() <span class="type">float64</span></span><br><span class="line">    Perimeter() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">    width  <span class="type">float64</span></span><br><span class="line">    height <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Rectangle)</span></span> Perimeter() <span class="type">float64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*r.width + <span class="number">2</span>*r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s Shape = Rectangle&#123;width: <span class="number">10</span>, height: <span class="number">20</span>&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Area:&quot;</span>, s.Area())</span><br><span class="line">    fmt.Println(<span class="string">&quot;Perimeter:&quot;</span>, s.Perimeter())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
